---
- name: Create a VM on OpenShift Virtualization
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    vm_name: apache-vm
    vm_project: vm-migration-test
    storage_class: nfs-storage-class
    storage_size: 15Gi
    memory_size: 2Gi
    cpu_cores: 2
    cpu_sockets: 1
    cpu_threads: 1
    cloud_init_password: password
    ssh_timeout: 300
    network_attachment: br-ex-network

  tasks:
    - name: Display VM configuration
      debug:
        msg:
          - "Creating VM: {{ vm_name }}"
          - "Namespace: {{ vm_project }}"
          - "Memory: {{ memory_size }}"
          - "CPU Cores: {{ cpu_cores }}"
          - "Storage Class: {{ storage_class }}"
          - "Network: {{ network_attachment }}"

    - name: Provision Virtual Machine in OpenShift
      kubernetes.core.k8s:
        state: present
        validate_certs: no
        definition:
          apiVersion: kubevirt.io/v1
          kind: VirtualMachine
          metadata:
            name: "{{ vm_name }}"
            namespace: "{{ vm_project }}"
            labels:
              app: "{{ vm_name }}"
          spec:
            running: true
            dataVolumeTemplates:
              - metadata:
                  name: "{{ vm_name }}"
                  annotations:
                    cdi.kubevirt.io/storage.bind.immediate.requested: "true"
                spec:
                  source:
                    pvc:
                      name: centos9-golden-image
                      namespace: vm-migration-test
                  storage:
                    storageClassName: "{{ storage_class }}"
                    accessModes:
                      - ReadWriteMany
                    volumeMode: Filesystem
                    resources:
                      requests:
                        storage: "{{ storage_size }}"
            template:
              metadata:
                labels:
                  kubevirt.io/domain: "{{ vm_name }}"
              spec:
                domain:
                  cpu:
                    cores: "{{ cpu_cores }}"
                    sockets: "{{ cpu_sockets }}"
                    threads: "{{ cpu_threads }}"
                  memory:
                    guest: "{{ memory_size }}"
                  devices:
                    disks:
                      - name: rootdisk
                        disk:
                          bus: virtio
                      - name: cloudinitdisk
                        disk:
                          bus: virtio
                    interfaces:
                      - name: default
                        bridge: {}
                networks:
                  - name: default
                    multus:
                      networkName: "{{ network_attachment }}"
                volumes:
                  - name: rootdisk
                    dataVolume:
                      name: "{{ vm_name }}"
                  - name: cloudinitdisk
                    cloudInitNoCloud:
                      networkData: |-
                        version: 2
                        ethernets:
                          eth0:
                            dhcp4: true
                            dhcp4-overrides:
                              use-dns: true
                      userData: |-
                        #cloud-config
                        user: root
                        password: {{ cloud_init_password }}
                        chpasswd: { expire: False }
                        ssh_pwauth: True
                        runcmd:
                          - sed -i 's/^#PermitRootLogin./PermitRootLogin yes/' /etc/ssh/sshd_config
                          - systemctl restart sshd
      register: vm_creation

    - name: Display VM creation result
      debug:
        msg: "VM {{ vm_name }} provisioned successfully in namespace {{ vm_project }}"
      when: vm_creation.changed

    - name: Wait for DataVolume to be created and ready
      kubernetes.core.k8s_info:
        api_version: cdi.kubevirt.io/v1beta1
        kind: DataVolume
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: dv_info
      until: 
        - dv_info.resources is defined
        - dv_info.resources | length > 0
        - dv_info.resources[0].status.phase is defined
        - dv_info.resources[0].status.phase == "Succeeded"
      retries: 60
      delay: 10

    - name: Display DataVolume status
      debug:
        msg: "DataVolume for {{ vm_name }} is ready (Phase: {{ dv_info.resources[0].status.phase }})"

    - name: Wait for VM to be running
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: vmi_info
      until:
        - vmi_info.resources is defined
        - vmi_info.resources | length > 0
        - vmi_info.resources[0].status.phase is defined
        - vmi_info.resources[0].status.phase == "Running"
      retries: 60
      delay: 10

    - name: Display VM running status
      debug:
        msg: "VM {{ vm_name }} is now running"

    - name: Wait for VM to get IP address
      pause:
        seconds: 30

    - name: Get VM network interface information
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: vmi_network_info

    - name: Set VM IP address
      set_fact:
        vm_ipv6: "{{ vmi_network_info.resources[0].status.interfaces[0].ipAddress | default('Not assigned yet') }}"

    - name: Display assigned IPv6 address
      debug:
        msg: "VM {{ vm_name }} IPv6: {{ vm_ipv6 }}"

    - name: Wait for SSH to become available on IPv6
      wait_for:
        host: "{{ vm_ipv6 }}"
        port: 22
        delay: 10
        timeout: 180
        state: started
      when: vm_ipv6 != 'Not assigned yet'

    - name: SSH into VM and get IPv4 address
      shell: |
        sshpass -p '{{ cloud_init_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{{ vm_ipv6 }} "ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}'"
      register: vm_ipv4_result
      when: vm_ipv6 != 'Not assigned yet'
      retries: 5
      delay: 10
      until: vm_ipv4_result.stdout != ""

    - name: Set VM IPv4 address
      set_fact:
        vm_ip: "{{ vm_ipv4_result.stdout | trim }}"
      when: vm_ipv4_result.stdout is defined and vm_ipv4_result.stdout != ""

    - name: Fallback to IPv6 if IPv4 extraction failed
      set_fact:
        vm_ip: "{{ vm_ipv6 }}"
      when: vm_ip is not defined

    - name: Display final IP address to be used
      debug:
        msg: "VM {{ vm_name }} IP (IPv4): {{ vm_ip }}"

    - name: Pass VM IP to next workflow job
      set_stats:
        data:
          vm_ip: "{{ vm_ip }}"
          vm_name: "{{ vm_name }}"
          vm_project: "{{ vm_project }}"
        per_host: no

    - name: Get VM information
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: vm_info

    - name: Display VM information
      debug:
        msg:
          - "VM Name: {{ vm_info.resources[0].metadata.name }}"
          - "Namespace: {{ vm_info.resources[0].metadata.namespace }}"
          - "CPU Cores: {{ vm_info.resources[0].spec.template.spec.domain.cpu.cores }}"
          - "CPU Sockets: {{ vm_info.resources[0].spec.template.spec.domain.cpu.sockets }}"
          - "CPU Threads: {{ vm_info.resources[0].spec.template.spec.domain.cpu.threads }}"
          - "Memory: {{ vm_info.resources[0].spec.template.spec.domain.memory.guest }}"
          - "Storage Size: {{ storage_size }}"
          - "Storage Class: {{ storage_class }}"
          - "VM Status: {{ vm_info.resources[0].status.printableStatus | default('Starting') }}"
          - "Network: {{ network_attachment }}"

    - name: Wait for SSH to become available
      wait_for:
        host: "{{ vm_ip }}"
        port: 22
        delay: 10
        timeout: "{{ ssh_timeout }}"
        state: started
      register: ssh_wait
      when: vm_ip != 'Not assigned yet'

    - name: Display SSH availability
      debug:
        msg: "SSH is now available on {{ vm_ip }}:22"
      when: vm_ip != 'Not assigned yet'

    - name: Deployment Summary
      debug:
        msg:
          - "======================================"
          - "VM Deployment Complete Successfully!"
          - "======================================"
          - "VM Name: {{ vm_name }}"
          - "IP Address: {{ vm_ip }}"
          - "Username: root"
          - "Password: {{ cloud_init_password }}"
          - "SSH Access: ssh root@{{ vm_ip }}"
          - "Network: {{ network_attachment }}"
          - "=========================================="
      when: vm_ip is defined and vm_ip != 'Not assigned yet'
